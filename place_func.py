from config import *
from plot_date_pic import *

# PLACE FUNC
def start(update, context):
    update.message.reply_text(text="""
    –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç\! –Ø –±–æ—Ç Event Caller, –ø—Ä–∏—à–µ–ª –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à—É –≤—Å—Ç—Ä–µ—á—É\.
    \n–≠—Ç–æ—Ç –±–æ—Ç –∑–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –∏–¥–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É –≤—Å—Ç—Ä–µ—á–∏\. –Ø –ø—Ä–∏–∑–≤–∞–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —à—É–º–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Å–µ–º –≤—Ä–µ–º—è ‚ò∫Ô∏è\.
    \n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è\. –ü—Ä–µ–¥–≥–∞–ª–∞–π—Ç–µ –º–µ—Å—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É \n/place _–º–µ—Å—Ç–æ_
    \n–ö–æ–≥–¥–∞ –∏–¥–µ–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, –¥–∞–π—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É \n /endplaces
    \n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ \n/delplace _–º–µ—Å—Ç–æ_
    """, parse_mode='MarkdownV2')
    
def addplace(update, context):
    global places
    if context.args:
        new_place = ' '.join(context.args[0:])
        places.add(new_place)
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ —Ç—ç–≥–∞")
    
def delplace(update, context):
    global places
    if context.args:
        del_place = ' '.join(context.args[0:])
        places.remove(del_place)
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ —Ç—ç–≥–∞")
    
def chooseplaces(update, context):
    global places
    if len(places) == 0:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Å—Ç–æ!")
        return
    elif len(places) == 1:
        global final_place
        final_place = places.pop()
        update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –º–µ—Å—Ç–æ –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–æ!")
        print_time_instructions(update, context)
        return
    
    update.message.reply_text("""
    –û—Ç–ª–∏—á–Ω–æ, —Å –º–µ—Å—Ç–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. \n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ - –≤—ã–∑–æ–≤–∏—Ç–µ /endpoll""")
    
    global poll_places
    poll_places = dict.fromkeys(places, 0)
    places = list(places)
    
    question = "–ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –∫–∞–∂–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º?"
    message = context.bot.send_poll(
        chat_id=update.effective_chat.id, 
        question=question, 
        options=places, 
        is_anonymous=False, 
        allows_multiple_answers=True,
    )
    payload = {
        message.poll.id: {
            "options": places,
            "message_id": message.message_id,
            "chat_id": update.effective_chat.id,
            "answers": 0,
        }
    }
    context.bot_data.update(payload)
    
    
def receive_place_poll_answer(update, context):
    answer = update.poll_answer
    poll_id = answer.poll_id
    options = context.bot_data[poll_id]["options"]
    
    selected_options = answer.option_ids
    
    for selected_option_id in selected_options:
        selected_option = options[selected_option_id]
        poll_places[selected_option] += 1
    context.bot_data[poll_id]["answers"] += 1
    
    
def endpoll(update, context):
    if not poll_places:
        update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    else:
        if sum(poll_places.values()) == 0:
            update.message.reply_text("–î–æ–ª–∂–µ–Ω –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫")
            return
        priority_places = [k for k, v in sorted(poll_places.items(), key=lambda item: item[1])][::-1]
        medals_string = ''
        for i in range(len(priority_places)):
            if i == 0:
                medals_string += f'ü•á {priority_places[i]} ->'
            elif i == 1 and poll_places[priority_places[i]] > 0:
                medals_string += f'ü•à {priority_places[i]} ->'
            elif i == 2 and poll_places[priority_places[i]] > 0:
                medals_string += f'ü•â {priority_places[i]} ->'
            else:
                break
        update.message.reply_text(medals_string[:-2])
        
        if len(priority_places) >= 2 and poll_places[priority_places[0]] == poll_places[priority_places[1]]:
            update.message.reply_text(f"–í–∏–¥–∏–º–æ, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ö–æ—á–µ—Ç –ø–æ–π—Ç–∏ —Å—é–¥–∞: {priority_places[0]} –∏–ª–∏ —Å—é–¥–∞: {priority_places[1]}. –Ø –≤—ã–±—Ä–∞–ª –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ, –¥–∞–π—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /changefinalplace")
        else:
            update.message.reply_text(f"–í–∏–¥–∏–º–æ, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ö–æ—á–µ—Ç –ø–æ–π—Ç–∏ —Å—é–¥–∞: {priority_places[0]}. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ, –¥–∞–π—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /changefinalplace")
        global final_place
        final_place = priority_places[0]
        print_time_instructions(update, context)
        
    
def changefinalplace(update, context):
    if context.args:
        global final_place
        final_place = ' '.join(context.args[0:])
        
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ —Ç—ç–≥–∞")
        
        
#TIME FUNC
from datetime import date

def print_time_instructions(update, context):
    update.message.reply_text("–ê –ø–æ–∫–∞ –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–∏\! \n–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ \n/dates _–î–î\.–ú–ú\.–ì–ì,–î–î\.–ú–ú\.–ì–ì,–î–î\.–ú–ú\.–ì–ì_\. \n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã _–î–î\.–ú–ú\.–ì–ì\-–î–î\.–ú–ú\.–ì–ì_\.\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥–∞—Ç–æ–π \- –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å —Ç—ç–≥–æ–º /end _–¥–∞—Ç–∞_, –∏ —è –æ—Ñ–æ—Ä–º–ª—é –∏—Ç–æ–≥–∏\!", parse_mode='MarkdownV2')
    
def date_to_datetimeobj(date):
    return datetime.datetime.strptime(date, '%d.%m.%y')
    
def parse_dates(dates):
    dates = dates.split(',')
    res = []
    for date in dates:
        if '-' not in date:
            res.append(date_to_datetimeobj(date))
        else:
            start_date, end_date = date.split('-')
            start_date, end_date = [date_to_datetimeobj(i) for i in [start_date, end_date]]
            delta = end_date - start_date
            for i in range(delta.days + 1):
                res.append(start_date + datetime.timedelta(days=i))
    return res

def dates(update, context):
    if context.args and len(context.args) == 1:
        dates = context.args[0]
        dates = parse_dates(dates)
        global all_dates
        for date in dates:
            all_dates.append(date)
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ò–∑–æ–±—Ä–∞–∑–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:")
        plot_name = plot_date_pic(all_dates)
        file = open(plot_name, 'rb') 
        context.bot.sendPhoto(chat_id=update.message.chat.id, photo=file)
        file.close()
        os.remove(plot_name)
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Ç—ç–≥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        
        
def end(update, context):
    if context.args:
        final_time = ' '.join(context.args[0:])
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ —Ç—ç–≥–∞")
    global final_place
    final_time = '\.'.join(final_time.split('.'))
    update.message.reply_text(f"–£—Ä–∞\! –ú–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ üòâ\n–ú–µ—Å—Ç–æ\: *{final_place}*\n–î–∞—Ç–∞\: *{final_time}*", parse_mode='MarkdownV2')

    
def help_(update, context):
    update.message.reply_text("""
    –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤–æ—Ç —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n
    /start -> –ø–æ–∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑!\n
    /contact -> –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è \n
    /help -> –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º \n
    """)
    
    
def contact(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—Å–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ @d_diotima")